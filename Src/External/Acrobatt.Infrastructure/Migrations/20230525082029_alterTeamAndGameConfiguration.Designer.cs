// <auto-generated />
using System;
using Acrobatt.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Acrobatt.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20230525082029_alterTeamAndGameConfiguration")]
    partial class alterTeamAndGameConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Acrobatt.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pseudo");

                    b.HasKey("Id")
                        .HasName("pk_account_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("email");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Acrobatt.Domain.Accounts.Account", b =>
                {
                    b.OwnsMany("Acrobatt.Domain.Accounts.Entities.GameConfiguration", "GameConfigurations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("game_configuration_id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Duration")
                                .HasColumnType("double precision")
                                .HasColumnName("duration");

                            b1.Property<int>("GameMode")
                                .HasColumnType("integer")
                                .HasColumnName("gameMode");

                            b1.Property<string>("GameName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("game_name");

                            b1.Property<bool>("IsPrivate")
                                .HasColumnType("boolean")
                                .HasColumnName("is_private");

                            b1.Property<int>("MaxFlags")
                                .HasColumnType("integer")
                                .HasColumnName("max_flags");

                            b1.Property<int>("MaxPlayers")
                                .HasColumnType("integer")
                                .HasColumnName("max_players");

                            b1.HasKey("Id")
                                .HasName("pk_game_configuration_id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("game_configurations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AccountId");

                            b1.OwnsMany("Acrobatt.Domain.Accounts.Entities.Team", "Teams", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasColumnName("team_id");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Color")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("color");

                                    b2.Property<int>("GameConfigurationId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("name");

                                    b2.Property<int>("NbPlayer")
                                        .HasColumnType("integer")
                                        .HasColumnName("nb_player");

                                    b2.HasKey("Id")
                                        .HasName("pk_team_id");

                                    b2.HasIndex("GameConfigurationId");

                                    b2.ToTable("teams", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("GameConfigurationId");
                                });

                            b1.OwnsOne("Acrobatt.Domain.Accounts.Entities.Map", "Map", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasColumnName("map_id");

                                    b2.Property<bool>("IsPublic")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("boolean")
                                        .HasDefaultValue(false)
                                        .HasColumnName("is_public");

                                    b2.Property<string>("MapCenter")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("map_center");

                                    b2.Property<string>("MapName")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("map_name");

                                    b2.HasKey("Id")
                                        .HasName("pk_map_id");

                                    b2.HasIndex("MapName")
                                        .IsUnique()
                                        .HasDatabaseName("map_name");

                                    b2.ToTable("maps", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("Id");
                                });

                            b1.Navigation("Map");

                            b1.Navigation("Teams");
                        });

                    b.Navigation("GameConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
